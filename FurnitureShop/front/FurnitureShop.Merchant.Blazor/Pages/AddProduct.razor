@page "/add-product/{organizationId}"
@using FurnitureShop.Merchant.Blazor.Dtos
@inject NavigationManager NavManager
<PageTitle>Add Product</PageTitle>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <h4> Create Porduct </h4>
    <DataAnnotationsValidator />
    @*<MudTextField Label="Name" HelperText="Max. 8 characters"
                  @bind-Value="model.Name" For="@(() => model.Name)" />
    <MudTextField Label="Description" HelperText="Max. 8 characters"
                  @bind-Value="model.Description" For="@(() => model.Description)" />
    <MudTextField Label="Brend" HelperText="Max. 8 characters"
                  @bind-Value="model.Brend" For="@(() => model.Brend)" />
    <MudTextField Label="Material" HelperText="Max. 8 characters"
                  @bind-Value="model.Material" For="@(() => model.Material)" />
    <MudTextField Label="Price" HelperText="Max. 8 characters"
                  @bind-Value="model.Price" For="@(() => model.Price)" />
    <MudTextField Label="Count" HelperText="Max. 8 characters"
                  @bind-Value="model.Count" For="@(() => model.Count)" />
    <MudTextField Label="Category" HelperText="Max. 8 characters"
                  @bind-Value="model.CategoryId" For="@(() => model.CategoryId)" />*@
    <br />
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto drawMiniButton">Create</MudButton>
</EditForm>


@code{
    [Parameter]
    public string? organizationId { get; set; }

    CreateProductDto? model = new CreateProductDto()
    {
        Name = "Birinchi",
        Description = "frekfnekrrf efejkfe",
        WithInstallation = true,
        Brend = "dddsds",
        Material = "dsdsd",
        Price = 100,
        IsAvailable = true,
        Count = 100,
        CategoryId = 1,
    };

    //AddFiles OrganizationImage = new AddFiles();

    protected void Redirect(string route)
    {
        NavManager.NavigateTo(route);
    }

    private async Task OnValidSubmit(EditContext context)
    {
        model.OrganizationId = new Guid(organizationId);

        var client = new HttpClient();
        client.BaseAddress = new Uri("https://localhost:1009");

        var message = new HttpRequestMessage(HttpMethod.Post, $"/api/Products");
        message.Content = JsonContent.Create(model);

        message.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);
        var responseMessage = await client.SendAsync(message);
        if (responseMessage.IsSuccessStatusCode)
            Redirect("/organizations");
    }
}