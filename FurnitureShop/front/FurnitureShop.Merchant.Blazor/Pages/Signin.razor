@page "/signin"

@using FurnitureShop.Admin.Blazor.Dtos
@inject NavigationManager NavManager


<PageTitle>Sign in</PageTitle>
<MudPaper Height="100vh" Width="100%" Style="border:none;">
    <div style="margin: 20px auto; margin-left: 200px;">
        <MudContainer MaxWidth="MaxWidth.Small">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12" sm="7">
                        <MudCard>
                            <MudCardContent>
                                <MudTextField Label="Username" HelperText="Max. 8 characters"
                                              @bind-Value="model.UserName" For="@(() => model.UserName)" />                                                          
                                <MudTextField Label="Password" Class="mt-3"
                                              @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Log in</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudContainer>
    </div>
    
</MudPaper>

@code {
    LoginUserDto model = new LoginUserDto();

    protected void Redirect(string s = "/profile")
    {
        NavManager.NavigateTo(s);
    }

    private async Task OnValidSubmit(EditContext context)
    {
        var client = new HttpClient();
        client.BaseAddress = new Uri("https://localhost:7113");

        var message = new HttpRequestMessage(HttpMethod.Post, "/api/account/signin");
        message.Content = JsonContent.Create(model);
        message.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);

        var result = await(await client.SendAsync(message)).Content.ReadAsStringAsync(); 
        if(result is not null)
        {
            Redirect();
        }
    }
}