@using FurnitureShop.Merchant.Blazor.Dtos;
@inject HttpClient Http

<MudButton Class="drawButton" Variant="Variant.Filled" OnClick="@(() => OpenDrawer(Anchor.End))">Add New Category</MudButton>

<MudDrawer @bind-Open="@open" Anchor="@anchor" Elevation="1" Variant="@DrawerVariant.Temporary">
    <EditForm Class="myDrawer" Model="@model" OnValidSubmit="OnValidSubmit">
        <h4> Create Organization </h4>
        <DataAnnotationsValidator />
            <MudTextField Label="Name" HelperText="Max. 8 characters"
                @bind-Value="model.Name" For="@(() => model.Name)" />
                
            <br />
            <MudFileUpload  T="IBrowserFile" FilesChanged="UploadFiles">
                <ButtonTemplate>
                <MudButton class="drawFile" HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload"
                               for="@context">
                        Upload Files
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>
            
            <br />
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto drawMiniButton">Create</MudButton>
    </EditForm>
</MudDrawer>

@code {
    bool open;
    Anchor anchor;

    void OpenDrawer(Anchor anchor)
    {
        open = true;
        this.anchor = anchor;
    }
}

@code{
    CreateOrganizationDto? model = new CreateOrganizationDto();
    // File Api

    private async Task UploadFiles(IBrowserFile file)
    {
        AddFiles OrganizationImage = new AddFiles();
        OrganizationImage.Files.Add(file);
        OrganizationImage.Folder = EFileFolder.Organization;
        OrganizationImage.Type = EFileType.Images;

        var client = new HttpClient();
        client.BaseAddress = new Uri("https://localhost:7019");
        var message = new HttpRequestMessage(HttpMethod.Post, $"/api/Files");
        message.Content = JsonContent.Create(OrganizationImage);
        message.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);

        var responseMessage = await client.SendAsync(message);
        var status = responseMessage.StatusCode;
        if (status == System.Net.HttpStatusCode.NotFound || status == System.Net.HttpStatusCode.BadRequest)
            error = "10000400";
    }

    // Merchatnt API

    string? error = null;

    private async Task OnValidSubmit(EditContext context)
    {
        var client = new HttpClient();
        client.BaseAddress = new Uri("https://localhost:7113");
        var message = new HttpRequestMessage(HttpMethod.Post, $"/api/Organizations");
        message.Content = JsonContent.Create(model);
        message.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);

        var responseMessage = await client.SendAsync(message);
        var status = responseMessage.StatusCode;
        if (status == System.Net.HttpStatusCode.NotFound || status == System.Net.HttpStatusCode.BadRequest)
            error = "10000400";
    }
}

