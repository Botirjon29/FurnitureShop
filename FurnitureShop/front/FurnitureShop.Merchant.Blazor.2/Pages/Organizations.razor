@page "/organizations"
@using FurnitureShop.Admin.Blazor.Dtos;
@inject HttpClient Http

<PageTitle>Organizations</PageTitle>
@if(Elements.Count <= 0)
{
    <div class="row">
        <h4 class="fw-bold py-3 mb-2">Organizations List</h4>
        <div class="col-lg-8 col-12 mb-4">
            <div class="card h-100">
                <div class="row h-100">
                    <div class="col-sm-12">
                        <div class="d-flex align-items-end h-100 justify-content-center mt-sm-0 mt-3">
                            <img src="/assets/img/illustrations/sitting-girl-with-laptop-light.png" class="img-fluid" alt="Image" data-app-light-img="illustrations/sitting-girl-with-laptop-light.png" data-app-dark-img="illustrations/sitting-girl-with-laptop-dark.png" width="120">
                            <h3 class="fw-bold py-3 mb-2" style="margin-left:10px">There is no any organizations</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-4 col-12 mb-4">
            <div class="card h-100">
                <div class="row h-100">
                    <div class="col-sm-12">
                        <div class="card-body text-sm-center text-center">
                        <button data-bs-target="#addRoleModal" data-bs-toggle="modal" class="btn btn-primary mb-3 text-nowrap add-new-role">Add New Organization</button>
                        <p class="mb-0">You can create new organization</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-datatable table-responsive">
            <div id="DataTables_Table_0_wrapper" class="dataTables_wrapper dt-bootstrap5 no-footer">
                <div class="card-header border-bottom flex-column flex-md-row mb-3">
                    <div class="head-label text-center">
                        <h5 class="card-title mb-0">Organizations</h5>
                    </div>
                </div>
                    <ToolBarContent>
                                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" Class="mt-0 leverow-ifs"></MudTextField>
                                    <MudSpacer/>
                                    <div class="dt-action-buttons text-end pt-3 pt-md-0 mr-5">
                                    <div class="dt-buttons">    <button class="dt-button create-new btn btn-primary" tabindex="0" aria-controls="DataTables_Table_0" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasAddUser"><span><i class="bx bx-plus me-sm-2"></i> <span class="d-none d-sm-inline-block">Create new organization</span></span></button>                        </div>
                                    </div>
                    </ToolBarContent>

                <div class="container">
                    <div class="row">
                        @foreach(var organization in Elements)
                        {
                        }
                        
                    </div>
                </div>

            </div>
        </div>
    </div>
 <_AddOrganization />
}
<template id="notify-delete">
    <swal-title>
        Successfully deleted!
    </swal-title>
    <swal-icon type="success"></swal-icon>
    <swal-param name="allowEscapeKey" value="false" />
</template>



@code {

    private bool FilterFunc1(OrganizationView element) => FilterFunc(element, searchString1);

    private bool FilterFunc(OrganizationView element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (searchString == element.Id)
            return true;
        return false;
    }
    public MarkupString StatusBadge(int type)
    {
        if (type == 3) return (MarkupString)$"<span class='badge bg-label-danger'>Deleted</span>";
        if (type == 0) return (MarkupString)$"<span class='badge bg-label-success'>Active</span>";

        return (MarkupString)$"<span class='badge bg-label-secondary'>InActive</span>";
    }
    public async void DeleteOrganizationById(string organizationId)
    {
        await Http.DeleteAsync($"https://localhost:7237/api/organizations/{organizationId}");
    }
    private HashSet<OrganizationView> selectedItems = new HashSet<OrganizationView>();
    private List<OrganizationView> Elements = new List<OrganizationView>();
    private bool _selectOnRowClick = true;
    private string _selectedItemText = "No row clicked";
    private string searchString1 = "";
    private MudTable<OrganizationView> _table;
    
    protected override async Task OnInitializedAsync()
    {
        Elements = await Http.GetFromJsonAsync<List<OrganizationView>>("https://localhost:7237/api/organizations");
    }

    void OnRowClick(TableRowClickEventArgs<OrganizationView> args)
    {
        _selectedItemText = $"{args.Item.Name} ({args.Item.Id})";
    }
}