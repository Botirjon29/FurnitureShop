@page "/organizations"
@using FurnitureShop.Merchant.Blazor.Dtos;
@inject HttpClient Http
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using System.Web;
@using RestSharp;
@using RestSharp.Authenticators;

<PageTitle>Organizations</PageTitle>

<_AddOrganization />
@*@if(Elements.Count < 1)
{
    <div class="nullContent">
        <img src="/assets/img/illustrations/sitting-girl-with-laptop-light.png" class="img-fluid notImage" alt="Image" data-app-light-img="illustrations/sitting-girl-with-laptop-light.png" data-app-dark-img="illustrations/sitting-girl-with-laptop-dark.png">
        <h3 class="fw-bold py-3 mb-2" style="margin-left:10px">There is no any organizations</h3>
    </div>
}
else{*@
    <div class="container">
        <br>
        <br>
        <br>
        <div class="row">
            @foreach (var element in Elements)
            {
                <div class="col-md-3">
                    <div class="card my_card">
                        <div class="myCard_image">
                            <img class="card_image" src="https://images.samsung.com/is/image/samsung/assets/id/2208/pfs/02-03-B4-kv-Durability-pc-570x304.jpg?$FB_TYPE_J_S_JPG$" alt="Organization Image">
                        </div>
                    
                        <div class="myCard_body">
                            <b class="myCard_name">@element.Name</b>
                            <p class="myCard_owner">By Abdulaziz Abduqaxxarov</p>
                            <span class="myCard_Span">256 prj.</span> 
                        </div>

                        <hr>

                        <div class="myCard_footer">
                            <button type="submit" class="btn btn-success mb-3 text-nowrap add-new-role">View More</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
@*}*@


@*@code{
    private List<OrganizationView> Elements = new List<OrganizationView>();
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7113/hub")
            .Build();

        _hubConnection.On<List<OrganizationView>>(nameof(GetAllOrganizations), GetAllOrganizations);
        await _hubConnection.StartAsync();
        await _hubConnection.InvokeAsync("GetAllOrganizations");
    }

    private async Task GetAllOrganizations(List<OrganizationView> organizations)
    {
        Elements = organizations;
        StateHasChanged();
    }
}*@

@code {
    public async void DeleteOrganizationById(string organizationId)
    {
        await Http.DeleteAsync($"https://localhost:7113/api/Organizations/{organizationId}");
    }

    private List<OrganizationView> Elements = new List<OrganizationView>();

    protected override async Task OnInitializedAsync()
    {
        @* var client = new RestClient("https://localhost:7113");
        client.Authenticator = new HttpBasicAuthenticator("Abdula", "27044072Abdu");

        var request = new RestRequest("/api​/Organizations");
        Elements = await client.GetAsync<List<OrganizationView>>(request); *@

        var client = new HttpClient();
        client.BaseAddress = new Uri("https://localhost:7113");

       // var urlString = HttpUtility.ParseQueryString("​/api​/Organizations");

        var message = new HttpRequestMessage(HttpMethod.Get, "​api​/Organizations");
        message.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);

        var profileJson = await (await client.SendAsync(message)).Content.ReadAsStringAsync();
        Elements = JsonConvert.DeserializeObject<List<OrganizationView>>(profileJson);
    }
}